<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo部署服务器</title>
      <link href="/2023/01/03/hexo%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2023/01/03/hexo%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h1><ul><li><p>本地环境</p><ul><li>Windows10(64bit)</li><li>环境：<code>git</code>，<code>Node.js</code>，<code>hexo</code>…</li><li>生成本地静态网站</li></ul></li><li><p>服务器环境</p><ul><li>腾讯云主机(CentOS 7.5 64bit)</li><li>环境：<code>git</code>，<code>Nginx</code>，<code>创建 git 用户</code></li><li>使用 git 自动化部署发布</li></ul><h1 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h1><p>连接服务器：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -v root@ip</span><br></pre></td></tr></table></figure><h2 id="1-安装-Git-源码包安装"><a href="#1-安装-Git-源码包安装" class="headerlink" title="1. 安装 Git (源码包安装)"></a>1. 安装 Git (源码包安装)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">因为 yum 源仓库的 Git 版本更新不及时，所以采用源码包进行安装。</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-1-安装依赖包"><a href="#1-1-安装依赖包" class="headerlink" title="1.1 安装依赖包"></a>1.1 安装依赖包</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class="line">yum install  gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure><p>通过命令 <code>git --version</code> 可以看到，Git 当前的版本号为 <code>1.8.3.1</code>，太过于陈旧，所以需要先把它移除了。</p><h3 id="1-2-卸载旧版本的-Git"><a href="#1-2-卸载旧版本的-Git" class="headerlink" title="1.2 卸载旧版本的 Git"></a>1.2 卸载旧版本的 Git</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum remove git</span><br></pre></td></tr></table></figure><h3 id="1-3-下载并解压"><a href="#1-3-下载并解压" class="headerlink" title="1.3 下载并解压"></a>1.3 下载并解压</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src   // 选择文件保存位置</span><br><span class="line">wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.39.0.tar.gz   // 下载链接</span><br><span class="line">tar -zxvf git-2.39.0.tar.gz   // 解压</span><br></pre></td></tr></table></figure><p>注：</p><p>当我们使用 <a href="https://so.csdn.net/so/search?q=wget&spm=1001.2101.3001.7020">wget</a>命令下载不安全的https 域名下的内容时会提示如下内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cannot verify pkg.jenkins.io&#x27;s certificate, issued by ‘/C=US/O=Let&#x27;s Encrypt/CN=R3’</span><br><span class="line">Issued certificate has expired. To connect to pkg.jenkins.io insecurely, use `--no-check-certificate&#x27;.</span><br></pre></td></tr></table></figure><p>修复：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install -y ca-certificates</span><br></pre></td></tr></table></figure><p>版本以及之后版本可<a href="https://mirrors.edge.kernel.org/pub/software/scm/git">到此</a>进行查看。解压后，会在当前目录下自动生成一个名为 <code>git-2.39.0</code> 的文件夹，里面就是解压出来的文件。可通过命令 <code>ls</code> 进行查看。</p><h3 id="1-4-编译安装"><a href="#1-4-编译安装" class="headerlink" title="1.4 编译安装"></a>1.4 编译安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd git-2.39.0   // 进入文件夹</span><br><span class="line">make prefix=/usr/local/git all  // 编译源码</span><br><span class="line">make prefix=/usr/local/git install  // 安装至 /usr/local/git 路径</span><br></pre></td></tr></table></figure><p>打开环境变量配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>在文件底部添加以下配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATH=$PATH:/usr/local/git/bin   // git 的目录</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><p>刷新环境变量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>最后再使用 <code>git --version</code> 查看版本号，已经为 <code>2.39.0</code></p><p><img src="C:/Users/ASUS/AppData/Roaming/Typora/typora-user-images/image-20230103112237278.png" alt="image-20230103112237278"></p><h2 id="2-git-新用户及配置"><a href="#2-git-新用户及配置" class="headerlink" title="2. git 新用户及配置"></a>2. git 新用户及配置</h2><h3 id="2-1-创建-git-用户"><a href="#2-1-创建-git-用户" class="headerlink" title="2.1 创建 git 用户"></a>2.1 创建 git 用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adduser y.lin</span><br><span class="line">passwd git</span><br><span class="line">chmod 740 /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>在英文输入法下，按Esc然后按shift和冒号，输入<code>set nu</code>就可以显示行号</p><p>找到以下内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## Allow root to run any commands anywhere</span><br><span class="line">root    ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure><p>在它下面添加一行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">y.lin ALL=(ALL) ALL</span><br></pre></td></tr></table></figure><p><img src="C:/Users/ASUS/AppData/Roaming/Typora/typora-user-images/image-20230103112106973.png" alt="image-20230103112106973"></p><p>保存并退出，将权限修改回来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 400 /etc/sudoers</span><br></pre></td></tr></table></figure><h3 id="2-2-密钥配置"><a href="#2-2-密钥配置" class="headerlink" title="2.2 密钥配置"></a>2.2 密钥配置</h3><p>本地中，使用 <code>Git Bash/powershell</code> 创建密钥</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 本地 windows </span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p><img src="C:/Users/ASUS/AppData/Roaming/Typora/typora-user-images/image-20230103112427086.png" alt="image-20230103112427086"></p><p>切换至 <code>y.lin</code> 用户，创建 <code>.ssh</code> 文件夹以及 <code>authorized_keys</code> 文件并将本地的 <code>id_rsa.pub</code> 文件内容粘贴到里面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su y.lin</span><br><span class="line">mkdir ~/.ssh</span><br><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>修改权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">chmod 600 .ssh/authorzied_keys</span><br><span class="line">chmod 700 .ssh</span><br></pre></td></tr></table></figure><h3 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h3><p>在本地 Windows 上，使用 <code>Git Bash</code> 测试是否能连接上服务器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -v y.lin@ip</span><br></pre></td></tr></table></figure><p>其中 SERVER 为服务器 ip 地址。若出现以下错误提示，检查本地密钥位置是否存在 <code>known_hosts</code> 文件，将其删除重新测试。测试结果为，不需要密码直接进入</p><h3 id="2-4-创建网站目录"><a href="#2-4-创建网站目录" class="headerlink" title="2.4 创建网站目录"></a>2.4 创建网站目录</h3><p>创建一个目录用于作为网站的根目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line">mkdir /home/hexo    # 此目录为网站的根目录</span><br></pre></td></tr></table></figure><p>赋予权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown y.lin:y.lin -R /home/hexo</span><br></pre></td></tr></table></figure><h2 id="3-安装配置-Nginx"><a href="#3-安装配置-Nginx" class="headerlink" title="3. 安装配置 Nginx"></a>3. 安装配置 Nginx</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意需要 root 权限</span><br><span class="line">yum install -y nginx    // 安装</span><br><span class="line">systemctl start nginx.service     // 启动服务</span><br></pre></td></tr></table></figure><p>使用 yum 安装的 nginx 在新版的 CentOS 中，需要使用 <code>systemctl</code>，而不是直接使用 <code>service start nginx</code><br>此时通过服务器的公网 IP 地址访问，可以看到 nginx 的欢迎页面，表示安装成功，如下图</p><h3 id="3-2-配置-Nginx"><a href="#3-2-配置-Nginx" class="headerlink" title="3.2 配置 Nginx"></a>3.2 配置 Nginx</h3><p>使用 <code>nginx -t</code> 命令查看位置，一般为 <code>/etc/nginx/nginx.conf</code>。<br>使用 <code>vim /etc/nginx/nginx.conf</code> 命令进行编辑，修改配置文件如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    server_name  yelin.fun;    # 修改为自己的域名</span><br><span class="line">    root         /home/hexo;    # 修改为网站的根目录</span><br><span class="line"></span><br><span class="line">    # Load configuration files for the default server block.</span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:/Users/ASUS/AppData/Roaming/Typora/typora-user-images/image-20230103123010379.png" alt="image-20230103123010379"></p><p><code>root</code> 处的网站目录，需要自己创建，也就是部署上传的位置</p><p>注意使用 <code>nginx -t</code> 命令检查配置文件的语法是否出错。然后使用 <code>systemctl restart nginx.service</code> 命令重启服务即可</p><h2 id="4-自动化部署"><a href="#4-自动化部署" class="headerlink" title="4. 自动化部署"></a>4. 自动化部署</h2><h3 id="4-1-建立-git-裸库"><a href="#4-1-建立-git-裸库" class="headerlink" title="4.1 建立 git 裸库"></a>4.1 建立 git 裸库</h3><p>创建一个裸仓库，裸仓库就是只保存 <code>git</code> 信息的 <code>Repository</code>, 首先切换到 <code>git</code> 用户确保 git 用户拥有仓库所有权，一定要加 <code>--bare</code>，这样才是一个裸库.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line">cd /home/git   # 在 git 用户目录下创建</span><br><span class="line">git init --bare blog.git</span><br></pre></td></tr></table></figure><p>这时，<code>git</code> 用户的 <code>~</code> 目录下就存在一个 <code>blog.git</code> 文件夹，可使用 <code>ls</code> 命令查看。再修改 <code>blog.git</code> 的权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown git:git -R blog.git</span><br></pre></td></tr></table></figure><h3 id="4-2-使用-git-hooks-同步网站根目录"><a href="#4-2-使用-git-hooks-同步网站根目录" class="headerlink" title="4.2 使用 git-hooks 同步网站根目录"></a>4.2 使用 git-hooks 同步网站根目录</h3><p>在这使用的是 <code>post-receive</code> 这个钩子，当 <code>git</code> 有收发的时候就会调用这个钩子。 在 <code>blog.git</code> 裸库的 hooks 文件夹中，新建 <code>post-receive</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>填入以下内容，其中 <code>/home/hexo</code> 为网站目录，根据自己的填入,保存退出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">git --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f</span><br></pre></td></tr></table></figure><h1 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h1><p>在本地中，和部署到 <code>pages</code> 服务一样，需要先 <code>hexo g</code> 命令生成静态文件，通过 <code>hexo s</code> 命令能够正常进行本地访问，并且确保已经安装了 <code>hexo-deployer-git</code></p><h2 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置 _config.yml"></a>配置 <code>_config.yml</code></h2><p><a href="https://so.csdn.net/so/search?q=hexo&spm=1001.2101.3001.7020">hexo</a> 根目录下的 <code>_config.yml</code> 文件，找到 <code>deploy</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: git@SERVER:/home/git/blog.git     # 用户名@服务器Ip:git仓库位置</span><br><span class="line">    branch: master      # 分支</span><br></pre></td></tr></table></figure><p>之后按照正常的流程进行部署即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>端口漏洞</title>
      <link href="/2023/01/02/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/01/02/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h6 id="FTP-21"><a href="#FTP-21" class="headerlink" title="FTP 21"></a>FTP 21</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">默认用户名密码 anonymous:anonymous</span><br><span class="line"></span><br><span class="line">暴力破解密码</span><br><span class="line"></span><br><span class="line">VSFTP某版本后门</span><br></pre></td></tr></table></figure><h6 id="SSH-22"><a href="#SSH-22" class="headerlink" title="SSH 22"></a>SSH 22</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">暴力破解密码</span><br></pre></td></tr></table></figure><h6 id="Telent-23"><a href="#Telent-23" class="headerlink" title="Telent 23"></a>Telent 23</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">暴力破解密码</span><br></pre></td></tr></table></figure><h6 id="SMTP-25"><a href="#SMTP-25" class="headerlink" title="SMTP 25"></a>SMTP 25</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无认证时可伪造发件人</span><br></pre></td></tr></table></figure><h6 id="DNS-53-UDP"><a href="#DNS-53-UDP" class="headerlink" title="DNS 53 UDP"></a>DNS 53 UDP</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">测试域传送漏洞</span><br><span class="line">SPF / DMARC Check</span><br><span class="line">DDos</span><br><span class="line">DNS Query Flood</span><br><span class="line">DNS 反弹</span><br></pre></td></tr></table></figure><h6 id="SMB-137-139-445"><a href="#SMB-137-139-445" class="headerlink" title="SMB 137/139/445"></a>SMB 137/139/445</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">为授权访问</span><br><span class="line">弱口令</span><br></pre></td></tr></table></figure><h6 id="SNMP-161"><a href="#SNMP-161" class="headerlink" title="SNMP 161"></a>SNMP 161</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Public 弱口令</span><br></pre></td></tr></table></figure><h6 id="LDAP-389"><a href="#LDAP-389" class="headerlink" title="LDAP 389"></a>LDAP 389</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">匿名访问</span><br><span class="line">注入</span><br></pre></td></tr></table></figure><h6 id="Rsync-873"><a href="#Rsync-873" class="headerlink" title="Rsync 873"></a>Rsync 873</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任意文件读写</span><br></pre></td></tr></table></figure><h6 id="RPC-1025"><a href="#RPC-1025" class="headerlink" title="RPC 1025"></a>RPC 1025</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NFS匿名访问</span><br></pre></td></tr></table></figure><h6 id="MSSQL-1433"><a href="#MSSQL-1433" class="headerlink" title="MSSQL 1433"></a>MSSQL 1433</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">弱密码</span><br></pre></td></tr></table></figure><h6 id="Java-RMI-1099"><a href="#Java-RMI-1099" class="headerlink" title="Java RMI 1099"></a>Java RMI 1099</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RCE</span><br></pre></td></tr></table></figure><h6 id="Oracel-1521"><a href="#Oracel-1521" class="headerlink" title="Oracel 1521"></a>Oracel 1521</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">弱密码</span><br></pre></td></tr></table></figure><h6 id="NFS-2049"><a href="#NFS-2049" class="headerlink" title="NFS 2049"></a>NFS 2049</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">权限设置不当</span><br></pre></td></tr></table></figure><h6 id="ZooKeeper-2181"><a href="#ZooKeeper-2181" class="headerlink" title="ZooKeeper 2181"></a>ZooKeeper 2181</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无身份认证</span><br></pre></td></tr></table></figure><h6 id="MySQL-3306"><a href="#MySQL-3306" class="headerlink" title="MySQL 3306"></a>MySQL 3306</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">弱密码</span><br></pre></td></tr></table></figure><h6 id="RDP-3389"><a href="#RDP-3389" class="headerlink" title="RDP  3389"></a>RDP  3389</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">弱密码</span><br></pre></td></tr></table></figure><h6 id="Postgres-5432"><a href="#Postgres-5432" class="headerlink" title="Postgres 5432"></a>Postgres 5432</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">弱密码</span><br></pre></td></tr></table></figure><h6 id="CouchDB-5984"><a href="#CouchDB-5984" class="headerlink" title="CouchDB 5984"></a>CouchDB 5984</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">未授权访问</span><br></pre></td></tr></table></figure><h6 id="Redis-6379"><a href="#Redis-6379" class="headerlink" title="Redis  6379"></a>Redis  6379</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无密码或弱密码</span><br></pre></td></tr></table></figure><h6 id="Elasticsearch-9200"><a href="#Elasticsearch-9200" class="headerlink" title="Elasticsearch  9200"></a>Elasticsearch  9200</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">代码执行</span><br></pre></td></tr></table></figure><h6 id="Memcached-11211"><a href="#Memcached-11211" class="headerlink" title="Memcached  11211"></a>Memcached  11211</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">未授权访问</span><br></pre></td></tr></table></figure><h6 id="MongoDB-27017"><a href="#MongoDB-27017" class="headerlink" title="MongoDB  27017"></a>MongoDB  27017</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无密码或弱密码</span><br></pre></td></tr></table></figure><h6 id="Hadoop-50070"><a href="#Hadoop-50070" class="headerlink" title="Hadoop  50070"></a>Hadoop  50070</h6><h4 id="端口入侵"><a href="#端口入侵" class="headerlink" title="端口入侵"></a>端口入侵</h4><h6 id="21端口"><a href="#21端口" class="headerlink" title="21端口"></a>21端口</h6><p>在服务器还未流行的时候，大多网站使用的是主机空间，网站文件是通过ftp进行传输，登陆需要账号和密码，因此出现不少ftp批量爆破工具</p><h6 id="135端口"><a href="#135端口" class="headerlink" title="135端口"></a>135端口</h6><p>早期黑客入侵个人电脑常使用135端口，先扫描大量135端口开发的ip后，在使用ntscan扫描器批量猜解密码，传ftp木马等。</p><h6 id="445端口"><a href="#445端口" class="headerlink" title="445端口"></a>445端口</h6><p>网吧的噩梦，网吧此端口不关，常常被黑客批量入侵全部电脑，网吧看谁不爽关谁的电脑，早期批量入侵网吧电脑、批量入侵机房电脑使用的就是此端口。直接在cmd使用ipc$空连接连接内网主机，真正实现用cmd入侵主机，像极了电影中的黑客。</p><h6 id="1433端口和3306端口"><a href="#1433端口和3306端口" class="headerlink" title="1433端口和3306端口"></a>1433端口和3306端口</h6><p>sqlserver默认端口号为：1433,  mysql的默认端口号为3306,这两个端口分别是两种数据库的默认链接端口，很多默认没有密码，或者使用弱密码，也常常被而已扫描利用。某某教程网域名的1433便取与此。</p><h6 id="3380端口"><a href="#3380端口" class="headerlink" title="3380端口"></a>3380端口</h6><p>3389端口是服务器默认连接端口，我们都知道电脑的默认用户名是administrator,但是密码很多人就设置很简单的密码或者空密码，导致被入侵</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/02/hello-world/"/>
      <url>/2023/01/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
